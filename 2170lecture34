import numpy as np
import matplotlib.pyplot as plt

def lstsq_constraint(A, b, C, d):
    ATA = A.T @ A
    CT = (C.T).reshape((len(ATA), -1))
    n = len(CT[0])
    KKT = np.block([[2*ATA, CT], [CT.T, np.zeros((n, n))]])
    KKTb = np.hstack((2*A.T @ b, d))
    return np.linalg.lstsq(KKT, KKTb, rcond=None)[0][:-n]

## Example 1
V = np.array([[0.97,1.86,0.41], 
              [1.23,2.18,0.53], 
              [0.80,1.24,0.62], 
              [1.29,0.98,0.51], 
              [1.10,1.23,0.69], 
              [0.67,0.34,0.54], 
              [0.87,0.26,0.62], 
              [1.10,0.16,0.48], 
              [1.92,0.22,0.71], 
              [1.29,0.12,0.62]])
t = 1000*np.ones(10) #target impressions
B = 1284 #Budget

print("Target Impressions in each Demographic Group =\n", t, "\n")

c = np.linalg.lstsq(V,t, rcond=None)[0]
print("No Budget: Cost = $" + str(round(sum(c),2))+"\n")
print("Spending in each Channel = $", [round(cost,2) for cost in c], "\n")
print("Expected Impressions in each Demographic Group =\n", [int(round(impress, 0)) for impress in V@c], "\n")
print("Relative RMS Error = " + str(round(100*(np.linalg.norm(V@c - t)/np.linalg.norm(t)),2)) + "%\n\n")

c = lstsq_constraint(V, t, np.ones(3), B)
print("Fixed Budget: Cost = $" + str(B) +"\n")
print("Spending in each Channel = $", [round(cost,2) for cost in c], "\n")
print("Expected Impressions in each Demographic Group =\n", [int(round(impress, 0)) for impress in V@c], "\n")
print("Relative RMS Error = " + str(round(100*(np.linalg.norm(V@c - t)/np.linalg.norm(t)),2)) + "%")

# ## Example 2
# n = 3 #degree of polyonmial
# M = 100 #number of data points per half
# xleft = np.random.random(M) - 1
# xright = np.random.random(M)
# x = np.hstack([xleft, xright])
# y = np.power(x,3) - x + 0.4/(1+25*np.power(x,2)) + 0.05*np.random.normal(size = 2*M)

# A = np.vstack([np.hstack([np.vander(xleft,n+1), np.zeros((M,n+1))]), 
#                 np.hstack([np.zeros((M,n+1)), np.vander(xright,n+1)])])
# D = np.vstack((np.hstack([np.zeros(n), 1, np.zeros(n), -1]), 
#                 np.hstack([np.zeros(n-1), 1, 0, np.zeros(n-1), -1, 0])))
# coeffs = lstsq_constraint(A,y,D,np.zeros(2))

# plt.ion()
# # Evaluate and plot for 200 equidistant points on each side.
# Npl = 200
# xpl_left = np.linspace(-1, 0, Npl)
# ypl_left = np.vander(xpl_left, n+1) @ coeffs[:n+1]
# xpl_right = np.linspace(0, 1, Npl)
# ypl_right = np.vander(xpl_right, n+1) @ coeffs[n+1:]
# plt.scatter(x, y)
# plt.plot(xpl_left, ypl_left, 'red')
# plt.plot(xpl_right, ypl_right, 'green')
# plt.show()
